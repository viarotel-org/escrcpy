import{_ as e,c as a,o as t,aj as n}from"./chunks/framework.MtKKuSHf.js";const g=JSON.parse('{"title":"Quick Start","description":"","frontmatter":{"title":"Quick Start"},"headers":[],"relativePath":"guide/started.md","filePath":"en/guide/started.md","lastUpdated":1747291551000}'),o={name:"guide/started.md"},r=n('<h1 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">​</a></h1><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><h3 id="manual-installation-via-released-packages" tabindex="-1">Manual installation via released packages <a class="header-anchor" href="#manual-installation-via-released-packages" aria-label="Permalink to &quot;Manual installation via released packages&quot;">​</a></h3><ul><li><a href="https://github.com/viarotel-org/escrcpy/releases" target="_blank" rel="noreferrer">Github</a></li><li><a href="https://gitee.com/viarotel-org/escrcpy/releases" target="_blank" rel="noreferrer">Gitee</a></li><li><a href="https://gitcode.com/viarotel-org/escrcpy/releases" target="_blank" rel="noreferrer">Gitcode</a></li></ul><h3 id="macos-can-be-installed-via-homebrew" tabindex="-1">macOS can be installed via Homebrew <a class="header-anchor" href="#macos-can-be-installed-via-homebrew" aria-label="Permalink to &quot;macOS can be installed via Homebrew&quot;">​</a></h3><p>See <a href="https://github.com/viarotel-org/homebrew-escrcpy" target="_blank" rel="noreferrer">homebrew-escrcpy</a></p><h2 id="usb-connection" tabindex="-1">USB Connection <a class="header-anchor" href="#usb-connection" aria-label="Permalink to &quot;USB Connection&quot;">​</a></h2><blockquote><p>Note: If the phone prompts for debugging authorization, click allow</p></blockquote><ol><li><a href="https://www.bing.com/search?q=Enable+developer+mode+android" target="_blank" rel="noreferrer">Enable developer mode</a> and <a href="https://www.bing.com/search?q=USB+debugging+android" target="_blank" rel="noreferrer">USB debugging</a> on your Android phone</li><li>Open Escrcpy and connect your Android phone to your computer</li><li>The device list in Escrcpy should have detected your phone, click start mirroring</li><li>Enjoy!</li></ol><h2 id="wifi-connection" tabindex="-1">WIFI Connection <a class="header-anchor" href="#wifi-connection" aria-label="Permalink to &quot;WIFI Connection&quot;">​</a></h2><h3 id="scan-qr-code-to-connect" tabindex="-1">Scan QR Code to Connect <a class="header-anchor" href="#scan-qr-code-to-connect" aria-label="Permalink to &quot;Scan QR Code to Connect&quot;">​</a></h3><ol><li>Follow steps 1-2 from USB connection</li><li>Enable and enter wireless debugging in developer mode</li><li>Click &quot;Pair device using QR code&quot;</li><li>Start enjoying!</li></ol><h3 id="connect-via-ip-address" tabindex="-1">Connect via IP Address <a class="header-anchor" href="#connect-via-ip-address" aria-label="Permalink to &quot;Connect via IP Address&quot;">​</a></h3><blockquote><p>Note: If initial wireless connection fails, you may need wireless pairing. Please refer to <a href="/help/">FAQ</a></p><p>Note: You need to enable wireless debugging and obtain your device&#39;s wireless address (usually the IP address assigned when connecting to WiFi) and port number (default is 5555) from the wireless debugging page</p></blockquote><ol><li>Follow steps 1-2 from USB connection</li><li>Enter the obtained device IP address and port number in Escrcpy, then click connect device</li><li>At this point, Escrcpy device list should detect your phone, click start mirroring</li><li>Start enjoying!</li></ol><h2 id="macos-linux" tabindex="-1">macOS &amp;&amp; Linux <a class="header-anchor" href="#macos-linux" aria-label="Permalink to &quot;macOS &amp;&amp; Linux&quot;">​</a></h2><blockquote><p>Note: These platforms do not come with integrated <a href="/reference/scrcpy/">Scrcpy</a>, you need to install them manually</p></blockquote><p><strong>In Escrcpy@1.27.1+ scrcpy binary files are preliminarily integrated, eliminating the need for manual scrcpy installation.</strong></p><ol><li>Refer to the <a href="/reference/scrcpy/linux">installation document</a> for Linux</li><li>Refer to the <a href="/reference/scrcpy/macos">installation document</a> for macOS</li><li>Follow steps in USB Connection and WIFI Connection after dependencies are installed successfully</li></ol><h2 id="gnirehtet-reverse-tethering" tabindex="-1">Gnirehtet Reverse Tethering <a class="header-anchor" href="#gnirehtet-reverse-tethering" aria-label="Permalink to &quot;Gnirehtet Reverse Tethering&quot;">​</a></h2><blockquote><p>Gnirehtet is built into the Windows and Linux apps to provide reverse tethering from PC to Android devices.</p></blockquote><p>After connecting the device through the above steps, enable the reverse network function through <code>Devices</code> -&gt; <code>Device Control Bar</code> -&gt; <code>Gnirehtet</code>.</p><p><strong>Note: macOS does not have Gnirehtet built-in. You need to manually install it to use this feature <a href="/reference/gnirehtet/">Installation Guide</a>.</strong></p>',23),i=[r];function l(c,s,d,h,u,p){return t(),a("div",null,i)}const b=e(o,[["render",l]]);export{g as __pageData,b as default};
