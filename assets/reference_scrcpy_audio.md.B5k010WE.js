import{_ as e,c as a,o as i,aj as s}from"./chunks/framework.MtKKuSHf.js";const b=JSON.parse('{"title":"Audio","description":"","frontmatter":{},"headers":[],"relativePath":"reference/scrcpy/audio.md","filePath":"en/reference/scrcpy/audio.md","lastUpdated":1747291551000}'),o={name:"reference/scrcpy/audio.md"},t=s(`<h1 id="audio" tabindex="-1">Audio <a class="header-anchor" href="#audio" aria-label="Permalink to &quot;Audio&quot;">​</a></h1><p>Audio forwarding is supported for devices with Android 11 or higher, and it is enabled by default:</p><ul><li>For <strong>Android 12 or newer</strong>, it works out-of-the-box.</li><li>For <strong>Android 11</strong>, you&#39;ll need to ensure that the device screen is unlocked when starting scrcpy. A fake popup will briefly appear to make the system think that the shell app is in the foreground. Without this, audio capture will fail.</li><li>For <strong>Android 10 or earlier</strong>, audio cannot be captured and is automatically disabled.</li></ul><p>If audio capture fails, then mirroring continues with video only (since audio is enabled by default, it is not acceptable to make scrcpy fail if it is not available), unless <code>--require-audio</code> is set.</p><h2 id="no-audio" tabindex="-1">No audio <a class="header-anchor" href="#no-audio" aria-label="Permalink to &quot;No audio&quot;">​</a></h2><p>To disable audio:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>scrcpy --no-audio</span></span></code></pre></div><p>To disable only the audio playback, see <a href="/reference/scrcpy/video#no-playback">no playback</a>.</p><h2 id="audio-only" tabindex="-1">Audio only <a class="header-anchor" href="#audio-only" aria-label="Permalink to &quot;Audio only&quot;">​</a></h2><p>To play audio only, disable video and control:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-video</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-control</span></span></code></pre></div><p>To play audio without a window:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --no-video and --no-control are implied by --no-window</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-window</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># interrupt with Ctrl+C</span></span></code></pre></div><p>Without video, the audio latency is typically not critical, so it might be interesting to add <a href="#buffering">buffering</a> to minimize glitches:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>scrcpy --no-video --audio-buffer=200</span></span></code></pre></div><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h2><p>By default, the device audio output is forwarded.</p><p>It is possible to capture the device microphone instead:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>scrcpy --audio-source=mic</span></span></code></pre></div><p>For example, to use the device as a dictaphone and record a capture directly on the computer:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>scrcpy --audio-source=mic --no-video --no-playback --record=file.opus</span></span></code></pre></div><p>Many sources are available:</p><ul><li><code>output</code> (default): forwards the whole audio output, and disables playback on the device (mapped to <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource#REMOTE_SUBMIX" target="_blank" rel="noreferrer"><code>REMOTE_SUBMIX</code></a>).</li><li><code>playback</code>: captures the audio playback (Android apps can opt-out, so the whole output is not necessarily captured).</li><li><code>mic</code>: captures the microphone (mapped to <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource#MIC" target="_blank" rel="noreferrer"><code>MIC</code></a>).</li><li><code>mic-unprocessed</code>: captures the microphone unprocessed (raw) sound (mapped to <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource#UNPROCESSED" target="_blank" rel="noreferrer"><code>UNPROCESSED</code></a>).</li><li><code>mic-camcorder</code>: captures the microphone tuned for video recording, with the same orientation as the camera if available (mapped to <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource#CAMCORDER" target="_blank" rel="noreferrer"><code>CAMCORDER</code></a>).</li><li><code>mic-voice-recognition</code>: captures the microphone tuned for voice recognition (mapped to <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource#VOICE_RECOGNITION" target="_blank" rel="noreferrer"><code>VOICE_RECOGNITION</code></a>).</li><li><code>mic-voice-communication</code>: captures the microphone tuned for voice communications (it will for instance take advantage of echo cancellation or automatic gain control if available) (mapped to <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource#VOICE_COMMUNICATION" target="_blank" rel="noreferrer"><code>VOICE_COMMUNICATION</code></a>).</li><li><code>voice-call</code>: captures voice call (mapped to <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource#VOICE_CALL" target="_blank" rel="noreferrer"><code>VOICE_CALL</code></a>).</li><li><code>voice-call-uplink</code>: captures voice call uplink only (mapped to <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource#VOICE_UPLINK" target="_blank" rel="noreferrer"><code>VOICE_UPLINK</code></a>).</li><li><code>voice-call-downlink</code>: captures voice call downlink only (mapped to <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource#VOICE_DOWNLINK" target="_blank" rel="noreferrer"><code>VOICE_DOWNLINK</code></a>).</li><li><code>voice-performance</code>: captures audio meant to be processed for live performance (karaoke), includes both the microphone and the device playback (mapped to <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource#VOICE_PERFORMANCE" target="_blank" rel="noreferrer"><code>VOICE_PERFORMANCE</code></a>).</li></ul><h3 id="duplication" tabindex="-1">Duplication <a class="header-anchor" href="#duplication" aria-label="Permalink to &quot;Duplication&quot;">​</a></h3><p>An alternative device audio capture method is also available (only for Android 13 and above):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>scrcpy --audio-source=playback</span></span></code></pre></div><p>This audio source supports keeping the audio playing on the device while mirroring, with <code>--audio-dup</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-source=playback</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-dup</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or simply:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-dup</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # --audio-source=playback is implied</span></span></code></pre></div><p>However, it requires Android 13, and Android apps can opt-out (so they are not captured).</p><p>See <a href="https://github.com/Genymobile/scrcpy/issues/4380" target="_blank" rel="noreferrer">#4380</a>.</p><h2 id="codec" tabindex="-1">Codec <a class="header-anchor" href="#codec" aria-label="Permalink to &quot;Codec&quot;">​</a></h2><p>The audio codec can be selected. The possible values are <code>opus</code> (default), <code>aac</code>, <code>flac</code> and <code>raw</code> (uncompressed PCM 16-bit LE):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-codec=opus</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # default</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-codec=aac</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-codec=flac</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-codec=raw</span></span></code></pre></div><p>In particular, if you get the following error:</p><blockquote><p>Failed to initialize audio/opus, error 0xfffffffe</p></blockquote><p>then your device has no Opus encoder: try <code>scrcpy --audio-codec=aac</code>.</p><p>For advanced usage, to pass arbitrary parameters to the <a href="https://developer.android.com/reference/android/media/MediaFormat" target="_blank" rel="noreferrer"><code>MediaFormat</code></a>, check <code>--audio-codec-options</code> in the manpage or in <code>scrcpy --help</code>.</p><p>For example, to change the <a href="https://developer.android.com/reference/android/media/MediaFormat#KEY_FLAC_COMPRESSION_LEVEL" target="_blank" rel="noreferrer">FLAC compression level</a>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-codec=flac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-codec-options=flac-compression-level=8</span></span></code></pre></div><h2 id="encoder" tabindex="-1">Encoder <a class="header-anchor" href="#encoder" aria-label="Permalink to &quot;Encoder&quot;">​</a></h2><p>Several encoders may be available on the device. They can be listed by:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list-encoders</span></span></code></pre></div><p>To select a specific encoder:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-codec=opus</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-encoder=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c2.android.opus.encoder&#39;</span></span></code></pre></div><h2 id="bit-rate" tabindex="-1">Bit rate <a class="header-anchor" href="#bit-rate" aria-label="Permalink to &quot;Bit rate&quot;">​</a></h2><p>The default audio bit rate is 128Kbps. To change it:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-bit-rate=64K</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-bit-rate=64000</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # equivalent</span></span></code></pre></div><p><em>This parameter does not apply to RAW audio codec (<code>--audio-codec=raw</code>).</em></p><h2 id="buffering" tabindex="-1">Buffering <a class="header-anchor" href="#buffering" aria-label="Permalink to &quot;Buffering&quot;">​</a></h2><p>Audio buffering is unavoidable. It must be kept small enough so that the latency is acceptable, but large enough to minimize buffer underrun (causing audio glitches).</p><p>The default buffer size is set to 50ms. It can be adjusted:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-buffer=40</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # smaller than default</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-buffer=100</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # higher than default</span></span></code></pre></div><p>Note that this option changes the <em>target</em> buffering. It is possible that this target buffering might not be reached (on frequent buffer underflow typically).</p><p>If you don&#39;t interact with the device (to watch a video for example), a higher latency (for both <a href="/reference/scrcpy/video#buffering">video</a> and audio) might be preferable to avoid glitches and smooth the playback:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>scrcpy --video-buffer=200 --audio-buffer=200</span></span></code></pre></div><p>It is also possible to configure another audio buffer (the audio output buffer), by default set to 5ms. Don&#39;t change it, unless you get some <a href="https://github.com/Genymobile/scrcpy/issues/3793" target="_blank" rel="noreferrer">robotic and glitchy sound</a>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Only if absolutely necessary</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --audio-output-buffer=10</span></span></code></pre></div>`,57),d=[t];function n(r,c,p,l,h,u){return i(),a("div",null,d)}const g=e(o,[["render",n]]);export{b as __pageData,g as default};
