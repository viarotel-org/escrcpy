import{_ as e,c as a,o as s,aj as t}from"./chunks/framework.MtKKuSHf.js";const b=JSON.parse('{"title":"Keyboard","description":"","frontmatter":{},"headers":[],"relativePath":"reference/scrcpy/keyboard.md","filePath":"en/reference/scrcpy/keyboard.md","lastUpdated":1747291551000}'),i={name:"reference/scrcpy/keyboard.md"},o=t(`<h1 id="keyboard" tabindex="-1">Keyboard <a class="header-anchor" href="#keyboard" aria-label="Permalink to &quot;Keyboard&quot;">​</a></h1><p>Several keyboard input modes are available:</p><ul><li><code>--keyboard=sdk</code> (default)</li><li><code>--keyboard=uhid</code> (or <code>-K</code>): simulates a physical HID keyboard using the UHID kernel module on the device</li><li><code>--keyboard=aoa</code>: simulates a physical HID keyboard using the AOAv2 protocol</li><li><code>--keyboard=disabled</code></li></ul><p>By default, <code>sdk</code> is used, but if you use scrcpy regularly, it is recommended to use <a href="#uhid"><code>uhid</code></a> and configure the keyboard layout once and for all.</p><h2 id="sdk-keyboard" tabindex="-1">SDK keyboard <a class="header-anchor" href="#sdk-keyboard" aria-label="Permalink to &quot;SDK keyboard&quot;">​</a></h2><p>In this mode (<code>--keyboard=sdk</code>, or if the parameter is omitted), keyboard input events are injected at the Android API level. It works everywhere, but it is limited to ASCII and some other characters.</p><p>Note that on some devices, an additional option must be enabled in developer options for this keyboard mode to work. See <a href="/reference/scrcpy/#prerequisites">prerequisites</a>.</p><p>Additional parameters (specific to <code>--keyboard=sdk</code>) described below allow to customize the behavior.</p><h3 id="text-injection-preference" tabindex="-1">Text injection preference <a class="header-anchor" href="#text-injection-preference" aria-label="Permalink to &quot;Text injection preference&quot;">​</a></h3><p>Two kinds of <a href="https://blog.rom1v.com/2018/03/introducing-scrcpy/#handle-text-input" target="_blank" rel="noreferrer">events</a> are generated when typing text:</p><ul><li><em>key events</em>, signaling that a key is pressed or released;</li><li><em>text events</em>, signaling that a text has been entered.</li></ul><p>By default, numbers and &quot;special characters&quot; are inserted using text events, but letters are injected using key events, so that the keyboard behaves as expected in games (typically for WASD keys).</p><p>But this may <a href="https://github.com/Genymobile/scrcpy/issues/650#issuecomment-512945343" target="_blank" rel="noreferrer">cause issues</a>. If you encounter such a problem, you can inject letters as text (or just switch to <a href="#uhid">UHID</a>):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefer-text</span></span></code></pre></div><p>(but this will break keyboard behavior in games)</p><p>On the contrary, you could force to always inject raw key events:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --raw-key-events</span></span></code></pre></div><h3 id="key-repeat" tabindex="-1">Key repeat <a class="header-anchor" href="#key-repeat" aria-label="Permalink to &quot;Key repeat&quot;">​</a></h3><p>By default, holding a key down generates repeated key events. Ths can cause performance problems in some games, where these events are useless anyway.</p><p>To avoid forwarding repeated key events:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-key-repeat</span></span></code></pre></div><h2 id="physical-keyboard-simulation" tabindex="-1">Physical keyboard simulation <a class="header-anchor" href="#physical-keyboard-simulation" aria-label="Permalink to &quot;Physical keyboard simulation&quot;">​</a></h2><p>Two modes allow to simulate a physical HID keyboard on the device.</p><p>To work properly, it is necessary to configure (once and for all) the keyboard layout on the device to match that of the computer.</p><p>The configuration page can be opened in one of the following ways:</p><ul><li>from the scrcpy window (when <code>uhid</code> or <code>aoa</code> is used), by pressing <kbd>MOD</kbd>+<kbd>k</kbd> (see <a href="/reference/scrcpy/shortcuts">shortcuts</a>)</li><li>from the device, in Settings → System → Languages and input → Physical devices</li><li>from a terminal on the computer, by executing <code>adb shell am start -a android.settings.HARD_KEYBOARD_SETTINGS</code></li></ul><p>From this configuration page, it is also possible to enable or disable on-screen keyboard.</p><h3 id="uhid" tabindex="-1">UHID <a class="header-anchor" href="#uhid" aria-label="Permalink to &quot;UHID&quot;">​</a></h3><p>This mode simulates a physical HID keyboard using the <a href="https://kernel.org/doc/Documentation/hid/uhid.txt" target="_blank" rel="noreferrer">UHID</a> kernel module on the device.</p><p>To enable UHID keyboard, use:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --keyboard=uhid</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -K</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # short version</span></span></code></pre></div><p>Once the keyboard layout is configured (see above), it is the best mode for using the keyboard while mirroring:</p><ul><li>it works for all characters and IME (contrary to <code>--keyboard=sdk</code>)</li><li>the on-screen keyboard can be disabled (contrary to <code>--keyboard=sdk</code>)</li><li>it works over TCP/IP (wirelessly) (contrary to <code>--keyboard=aoa</code>)</li><li>there are no issues on Windows (contrary to <code>--keyboard=aoa</code>)</li></ul><p>One drawback is that it may not work on old Android versions due to permission errors.</p><h3 id="aoa" tabindex="-1">AOA <a class="header-anchor" href="#aoa" aria-label="Permalink to &quot;AOA&quot;">​</a></h3><p>This mode simulates a physical HID keyboard using the <a href="https://source.android.com/devices/accessories/aoa2#hid-support" target="_blank" rel="noreferrer">AOAv2</a> protocol.</p><p>To enable AOA keyboard, use:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --keyboard=aoa</span></span></code></pre></div><p>Contrary to the other modes, it works at the USB level directly (so it only works over USB).</p><p>It does not use the scrcpy server, and does not require <code>adb</code> (USB debugging). Therefore, it is possible to control the device (but not mirror) even with USB debugging disabled (see <a href="/reference/scrcpy/otg">OTG</a>).</p><p>Note: On Windows, it may only work in <a href="/reference/scrcpy/otg">OTG mode</a>, not while mirroring (it is not possible to open a USB device if it is already open by another process like the <em>adb daemon</em>).</p>`,41),r=[o];function n(d,l,c,h,p,k){return s(),a("div",null,r)}const u=e(i,[["render",n]]);export{b as __pageData,u as default};
