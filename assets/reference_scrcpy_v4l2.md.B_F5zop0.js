import{_ as s,c as e,o as i,aj as a}from"./chunks/framework.MtKKuSHf.js";const g=JSON.parse('{"title":"Video4Linux","description":"","frontmatter":{"title":"Video4Linux"},"headers":[],"relativePath":"reference/scrcpy/v4l2.md","filePath":"en/reference/scrcpy/v4l2.md","lastUpdated":1747291551000}'),t={name:"reference/scrcpy/v4l2.md"},n=a(`<h1 id="video4linux" tabindex="-1">Video4Linux <a class="header-anchor" href="#video4linux" aria-label="Permalink to &quot;Video4Linux&quot;">​</a></h1><p>On Linux, it is possible to send the video stream to a <a href="https://en.wikipedia.org/wiki/Video4Linux" target="_blank" rel="noreferrer">v4l2</a> loopback device, so that the Android device can be opened like a webcam by any v4l2-capable tool.</p><p>The module <code>v4l2loopback</code> must be installed:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v4l2loopback-dkms</span></span></code></pre></div><p>To create a v4l2 device:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> modprobe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v4l2loopback</span></span></code></pre></div><p>This will create a new video device in <code>/dev/videoN</code>, where <code>N</code> is an integer (more <a href="https://github.com/umlaeute/v4l2loopback#options" target="_blank" rel="noreferrer">options</a> are available to create several devices or devices with specific IDs).</p><p>If you encounter problems detecting your device with Chrome/WebRTC, you can try <code>exclusive_caps</code> mode:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo modprobe v4l2loopback exclusive_caps=1</span></span></code></pre></div><p>To list the enabled devices:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># requires v4l-utils package</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v4l2-ctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list-devices</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># simple but might be sufficient</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/video</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><p>To start <code>scrcpy</code> using a v4l2 sink:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --v4l2-sink=/dev/videoN</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --v4l2-sink=/dev/videoN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-video-playback</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # disable playback window</span></span></code></pre></div><p>(replace <code>N</code> with the device ID, check with <code>ls /dev/video*</code>)</p><p>Once enabled, you can open your video stream with a v4l2-capable tool:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffplay</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/videoN</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vlc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v4l2:///dev/videoN</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # VLC might add some buffering delay</span></span></code></pre></div><p>For example, you could capture the video within <a href="https://obsproject.com/" target="_blank" rel="noreferrer">OBS</a> or within your video conference tool.</p><h2 id="buffering" tabindex="-1">Buffering <a class="header-anchor" href="#buffering" aria-label="Permalink to &quot;Buffering&quot;">​</a></h2><p>By default, there is no video buffering, to get the lowest possible latency.</p><p>As for the <a href="/reference/scrcpy/video#buffering">video display</a>, it is possible to add buffering to delay the v4l2 stream:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --v4l2-buffer=300</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # add 300ms buffering for v4l2 sink</span></span></code></pre></div>`,21),l=[n];function p(o,d,h,c,r,k){return i(),e("div",null,l)}const b=s(t,[["render",p]]);export{g as __pageData,b as default};
