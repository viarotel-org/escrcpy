import{_ as s,c as a,o as i,aj as e}from"./chunks/framework.MtKKuSHf.js";const g=JSON.parse('{"title":"Video4Linux（视频流监控）","description":"","frontmatter":{"title":"Video4Linux（视频流监控）"},"headers":[],"relativePath":"zhHans/reference/scrcpy/v4l2.md","filePath":"zhHans/reference/scrcpy/v4l2.md","lastUpdated":1747291551000}'),t={name:"zhHans/reference/scrcpy/v4l2.md"},p=e(`<h1 id="video4linux" tabindex="-1">Video4Linux <a class="header-anchor" href="#video4linux" aria-label="Permalink to &quot;Video4Linux&quot;">​</a></h1><p>在 Linux 系统上，可以将视频流发送到 <a href="https://en.wikipedia.org/wiki/Video4Linux" target="_blank" rel="noreferrer">v4l2</a> 回环设备，这样 Android 设备就能像普通摄像头一样被任何支持 v4l2 的工具打开。</p><p>需要先安装 <code>v4l2loopback</code> 模块：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v4l2loopback-dkms</span></span></code></pre></div><p>创建 v4l2 设备：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> modprobe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v4l2loopback</span></span></code></pre></div><p>这将在 <code>/dev/videoN</code> 路径下创建一个新的视频设备，其中 <code>N</code> 为数字（可通过更多<a href="https://github.com/umlaeute/v4l2loopback#options" target="_blank" rel="noreferrer">选项</a>创建多个设备或指定设备ID）。</p><p>如果在 Chrome/WebRTC 中检测设备时遇到问题，可以尝试 <code>exclusive_caps</code> 模式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo modprobe v4l2loopback exclusive_caps=1</span></span></code></pre></div><p>列出已启用的设备：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 需要安装 v4l-utils 包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v4l2-ctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list-devices</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 简单方法（通常够用）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/video</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><p>使用 v4l2 接收器启动 <code>scrcpy</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --v4l2-sink=/dev/videoN</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --v4l2-sink=/dev/videoN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-video-playback</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 禁用播放窗口</span></span></code></pre></div><p>（将 <code>N</code> 替换为设备ID，可通过 <code>ls /dev/video*</code> 查看）</p><p>启用后，即可使用支持 v4l2 的工具打开视频流：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffplay</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/videoN</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vlc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v4l2:///dev/videoN</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # VLC 可能会增加缓冲延迟</span></span></code></pre></div><p>例如，可以在 <a href="https://obsproject.com/" target="_blank" rel="noreferrer">OBS</a> 或视频会议软件中捕获视频。</p><h2 id="缓冲" tabindex="-1">缓冲 <a class="header-anchor" href="#缓冲" aria-label="Permalink to &quot;缓冲&quot;">​</a></h2><p>默认情况下不启用视频缓冲，以实现最低延迟。</p><p>与<a href="/zhHans/reference/scrcpy/video#buffering">视频显示</a>类似，可以为 v4l2 流添加缓冲延迟：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrcpy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --v4l2-buffer=300</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 为 v4l2 接收器添加 300ms 缓冲</span></span></code></pre></div>`,21),n=[p];function l(h,d,o,c,k,r){return i(),a("div",null,n)}const b=s(t,[["render",l]]);export{g as __pageData,b as default};
